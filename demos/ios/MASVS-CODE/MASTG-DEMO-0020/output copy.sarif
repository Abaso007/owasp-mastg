{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver": {"name": "dependency-check","version": "10.0.4","informationUri": "https://jeremylong.github.io/DependencyCheck/","rules": [{"id": "CVE-2020-9861","shortDescription": {"text": "high severity - CVE-2020-9861 Uncontrolled Recursion vulnerability in pkg:swift\/swift-nio@2.33.0"},"fullDescription": {"text": "A stack overflow issue existed in Swift for Linux. The issue was addressed with improved input validation for dealing with deeply nested malicious JSON input."},"help": {"text": "","markdown": "For more information see [CVE-2020-9861](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2020-9861).\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 5.0,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "NONE","cvssv2_confidentialityImpact": "NONE","cvssv2_integrityImpact": "NONE","cvssv2_availabilityImpact": "PARTIAL","cvssv2_severity": "MEDIUM","cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_exploitabilityScore": "3.9","cvssv3_impactScore": "3.6","cvssv3_version": "_3_1","source": "NVD"}},{"id": "CVE-2022-1642","shortDescription": {"text": "high severity - CVE-2022-1642 Incorrect Type Conversion or Cast vulnerability in pkg:swift\/swift-nio@2.33.0"},"fullDescription": {"text": "A program using swift-corelibs-foundation is vulnerable to a denial of service attack caused by a potentially malicious source producing a JSON document containing a type mismatch. This vulnerability is caused by the interaction between a deserialization mechanism offered by the Swift standard library, the Codable protocol; and the JSONDecoder class offered by swift-corelibs-foundation, which can deserialize types that adopt the Codable protocol based on the content of a provided JSON document. When a type that adopts Codable requests the initialization of a field with an integer value, the JSONDecoder class uses a type-erased container with different accessor methods to attempt and coerce a corresponding JSON value and produce an integer. In the case the JSON value was a numeric literal with a floating-point portion, JSONDecoder used different type-eraser methods during validation than it did during the final casting of the value. The checked casting produces a deterministic crash due to this mismatch. The JSONDecoder class is often wrapped by popular Swift-based web frameworks to parse the body of HTTP requests and perform basic type validation. This makes the attack low-effort: sending a specifically crafted JSON document during a request to these endpoints will cause them to crash. The attack does not have any confidentiality or integrity risks in and of itself; the crash is produced deterministically by an abort function that ensures that execution does not continue in the face of this violation of assumptions. However, unexpected crashes can lead to violations of invariants in services, so it's possible that this attack can be used to trigger error conditions that escalate the risk. Producing a denial of service may also be the goal of an attacker in itself. This issue is solved in Swift 5.6.2 for Linux and Windows. This issue was solved by ensuring that the same methods are invoked both when validating and during casting, so that no type mismatch occurs. Swift for Linux and Windows versions are not ABI-interchangeable. To upgrade a service, its owner must update to this version of the Swift toolchain, then recompile and redeploy their software. The new version of Swift includes an updated swift-corelibs-foundation package. Versions of Swift running on Darwin-based operating systems are not affected."},"help": {"text": "","markdown": "For more information see [CVE-2022-1642](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2022-1642).\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 5.0,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "NONE","cvssv2_confidentialityImpact": "NONE","cvssv2_integrityImpact": "NONE","cvssv2_availabilityImpact": "PARTIAL","cvssv2_severity": "MEDIUM","cvssv3_baseScore": 7.5,"security-severity": "7.5","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "NONE","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_exploitabilityScore": "3.9","cvssv3_impactScore": "3.6","cvssv3_version": "_3_1","source": "NVD"}},{"id": "CVE-2022-3918","shortDescription": {"text": "high severity - CVE-2022-3918 Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') vulnerability in pkg:swift\/swift-nio@2.33.0"},"fullDescription": {"text": "A program using FoundationNetworking in swift-corelibs-foundation is potentially vulnerable to CRLF ( ) injection in URLRequest headers. In this vulnerability, a client can insert one or several CRLF sequences into a URLRequest header value. When that request is sent via URLSession to an HTTP server, the server may interpret the content after the CRLF as extra headers, or even a second request. For example, consider a URLRequest to http:\/\/example.com\/ with the GET method. Suppose we set the URLRequest header \"Foo\" to the value \"Bar Extra-Header: Added GET \/other HTTP\/1.1\". When this request is sent, it will appear to the server as two requests: GET \/ HTTP\/1.1 Foo: Bar Extra-Header: Added GET \/other HTTP\/1.1 In this manner, the client is able to inject extra headers and craft an entirely new request to a separate path, despite only making one API call in URLSession. If a developer has total control over the request and its headers, this vulnerability may not pose a threat. However, this vulnerability escalates if un-sanitized user input is placed in header values. If so, a malicious user could inject new headers or requests to an intermediary or backend server. Developers should be especially careful to sanitize user input in this case, or upgrade their version of swift-corelibs-foundation to include the patch below."},"help": {"text": "","markdown": "For more information see [CVE-2022-3918](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2022-3918).\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv3_baseScore": 8.8,"security-severity": "8.8","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_exploitabilityScore": "2.8","cvssv3_impactScore": "5.9","cvssv3_version": "_3_1","source": "NVD"}},{"id": "CVE-2019-8790","shortDescription": {"text": "medium severity - CVE-2019-8790 Insecure Storage of Sensitive Information vulnerability in pkg:swift\/swift-nio@2.33.0"},"fullDescription": {"text": "This issue was addresses by updating incorrect URLSession file descriptors management logic to match Swift 5.0. This issue is fixed in Swift 5.1.1 for Ubuntu. Incorrect management of file descriptors in URLSession could lead to inadvertent data disclosure."},"help": {"text": "","markdown": "For more information see [CVE-2019-8790](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2019-8790).\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 2.1,"cvssv2_accessVector": "LOCAL","cvssv2_accessComplexity": "LOW","cvssv2_authenticationr": "NONE","cvssv2_confidentialityImpact": "PARTIAL","cvssv2_integrityImpact": "NONE","cvssv2_availabilityImpact": "NONE","cvssv2_severity": "LOW","cvssv3_baseScore": 5.5,"security-severity": "5.5","cvssv3_attackVector": "LOCAL","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "LOW","cvssv3_userInteraction": "NONE","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "NONE","cvssv3_availabilityImpact": "NONE","cvssv3_baseSeverity": "MEDIUM","cvssv3_exploitabilityScore": "1.8","cvssv3_impactScore": "3.6","cvssv3_version": "_3_1","source": "NVD"}},{"id": "CVE-2018-4220","shortDescription": {"text": "high severity - CVE-2018-4220 Incorrect Permission Assignment for Critical Resource vulnerability in pkg:swift\/swift-nio@2.33.0"},"fullDescription": {"text": "An issue was discovered in certain Apple products. Swift before 4.1.1 Security Update 2018-001 is affected. The issue involves the \"Swift for Ubuntu\" component. It allows attackers to execute arbitrary code in a privileged context because write and execute permissions are enabled during library loading."},"help": {"text": "","markdown": "For more information see [CVE-2018-4220](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2018-4220).\n\n\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html)."},"properties": {"cvssv2_score": 9.3,"cvssv2_accessVector": "NETWORK","cvssv2_accessComplexity": "MEDIUM","cvssv2_authenticationr": "NONE","cvssv2_confidentialityImpact": "COMPLETE","cvssv2_integrityImpact": "COMPLETE","cvssv2_availabilityImpact": "COMPLETE","cvssv2_severity": "HIGH","cvssv3_baseScore": 8.8,"security-severity": "8.8","cvssv3_attackVector": "NETWORK","cvssv3_attackComplexity": "LOW","cvssv3_privilegesRequired": "NONE","cvssv3_userInteraction": "REQUIRED","cvssv3_scope": "UNCHANGED","cvssv3_confidentialityImpact": "HIGH","cvssv3_integrityImpact": "HIGH","cvssv3_availabilityImpact": "HIGH","cvssv3_baseSeverity": "HIGH","cvssv3_exploitabilityScore": "2.8","cvssv3_impactScore": "5.9","cvssv3_version": "_3_0","source": "NVD"}}],"properties": {"disclaimer": "Dependency-Check is an open source tool performing a best effort analysis of 3rd party dependencies; false positives and false negatives may exist in the analysis performed by the tool. Use of the tool and the reporting provided constitutes acceptance for use in an AS IS condition, and there are NO warranties, implied or otherwise, with regard to the analysis or its use. Any use of the tool and the reporting provided is at the user's risk. In no event shall the copyright holder or OWASP be held liable for any damages whatsoever arising out of or in connection with the use of this tool, the analysis performed, or the resulting report.","nvd": "This product uses the NVD API but is not endorsed or certified by the NVD. This report contains data retrieved from the National Vulnerability Database: https://nvd.nist.gov","cisa": "This report may contain data retrieved from the CISA Known Exploited Vulnerability Catalog: https://www.cisa.gov/known-exploited-vulnerabilities-catalog","npm": "This report may contain data retrieved from the the Github Advisory Database (via NPM Audit API): https://github.com/advisories/","retirejs": "This report may contain data retrieved from the RetireJS community: https://retirejs.github.io/retire.js/","ossindex": "This report may contain data retrieved from the Sonatype OSS Index: https://ossindex.sonatype.org","NVD API Last Checked": "2024-10-16T06:07:56+02","NVD API Last Modified": "2024-10-16T03:15:02Z"}}},"artifacts": [{"location": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved"},"properties": {"id1": "pkg:swift\/swift-nio@2.33.0","vid1": "cpe:2.3:a:apple:swift:2.33.0:*:*:*:*:*:*:*","vid2": "cpe:2.3:a:apple:swift_foundation:2.33.0:*:*:*:*:*:*:*"}}],"results": [ {"ruleId": "CVE-2018-4220","level": "warning","message": {"text": "CVE-2018-4220 - An issue was discovered in certain Apple products. Swift before 4.1.1 Security Update 2018-001 is affected. The issue involves the \"Swift for Ubuntu\" component. It allows attackers to execute arbitrary code in a privileged context because write and execute permissions are enabled during library loading."},"partialFingerprints": {"vulnerabilityHash": "3f758c43ed8a0566a7f3f5f4f46bae5f"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:swift\/swift-nio@2.33.0"}]}]}, {"ruleId": "CVE-2022-3918","level": "warning","message": {"text": "CVE-2022-3918 - A program using FoundationNetworking in swift-corelibs-foundation is potentially vulnerable to CRLF ( ) injection in URLRequest headers. In this vulnerability, a client can insert one or several CRLF sequences into a URLRequest header value. When that request is sent via URLSession to an HTTP server, the server may interpret the content after the CRLF as extra headers, or even a second request. For example, consider a URLRequest to http:\/\/example.com\/ with the GET method. Suppose we set the URLRequest header \"Foo\" to the value \"Bar Extra-Header: Added GET \/other HTTP\/1.1\". When this request is sent, it will appear to the server as two requests: GET \/ HTTP\/1.1 Foo: Bar Extra-Header: Added GET \/other HTTP\/1.1 In this manner, the client is able to inject extra headers and craft an entirely new request to a separate path, despite only making one API call in URLSession. If a developer has total control over the request and its headers, this vulnerability may not pose a threat. However, this vulnerability escalates if un-sanitized user input is placed in header values. If so, a malicious user could inject new headers or requests to an intermediary or backend server. Developers should be especially careful to sanitize user input in this case, or upgrade their version of swift-corelibs-foundation to include the patch below."},"partialFingerprints": {"vulnerabilityHash": "6ea52063e689446a344d211c519a3556"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:swift\/swift-nio@2.33.0"}]}]}, {"ruleId": "CVE-2020-9861","level": "warning","message": {"text": "CVE-2020-9861 - A stack overflow issue existed in Swift for Linux. The issue was addressed with improved input validation for dealing with deeply nested malicious JSON input."},"partialFingerprints": {"vulnerabilityHash": "ad32e387d304c49cc53ee1feabc845c8"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:swift\/swift-nio@2.33.0"}]}]}, {"ruleId": "CVE-2022-1642","level": "warning","message": {"text": "CVE-2022-1642 - A program using swift-corelibs-foundation is vulnerable to a denial of service attack caused by a potentially malicious source producing a JSON document containing a type mismatch. This vulnerability is caused by the interaction between a deserialization mechanism offered by the Swift standard library, the Codable protocol; and the JSONDecoder class offered by swift-corelibs-foundation, which can deserialize types that adopt the Codable protocol based on the content of a provided JSON document. When a type that adopts Codable requests the initialization of a field with an integer value, the JSONDecoder class uses a type-erased container with different accessor methods to attempt and coerce a corresponding JSON value and produce an integer. In the case the JSON value was a numeric literal with a floating-point portion, JSONDecoder used different type-eraser methods during validation than it did during the final casting of the value. The checked casting produces a deterministic crash due to this mismatch. The JSONDecoder class is often wrapped by popular Swift-based web frameworks to parse the body of HTTP requests and perform basic type validation. This makes the attack low-effort: sending a specifically crafted JSON document during a request to these endpoints will cause them to crash. The attack does not have any confidentiality or integrity risks in and of itself; the crash is produced deterministically by an abort function that ensures that execution does not continue in the face of this violation of assumptions. However, unexpected crashes can lead to violations of invariants in services, so it's possible that this attack can be used to trigger error conditions that escalate the risk. Producing a denial of service may also be the goal of an attacker in itself. This issue is solved in Swift 5.6.2 for Linux and Windows. This issue was solved by ensuring that the same methods are invoked both when validating and during casting, so that no type mismatch occurs. Swift for Linux and Windows versions are not ABI-interchangeable. To upgrade a service, its owner must update to this version of the Swift toolchain, then recompile and redeploy their software. The new version of Swift includes an updated swift-corelibs-foundation package. Versions of Swift running on Darwin-based operating systems are not affected."},"partialFingerprints": {"vulnerabilityHash": "50e80d7087d1cf08bbc18924970c6f6a"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:swift\/swift-nio@2.33.0"}]}]}, {"ruleId": "CVE-2019-8790","level": "warning","message": {"text": "CVE-2019-8790 - This issue was addresses by updating incorrect URLSession file descriptors management logic to match Swift 5.0. This issue is fixed in Swift 5.1.1 for Ubuntu. Incorrect management of file descriptors in URLSession could lead to inadvertent data disclosure."},"partialFingerprints": {"vulnerabilityHash": "f59a361684f99f0204c2ab5c2a16daf7"},"locations": [{"physicalLocation": {"artifactLocation": {"uri": "file://\/Users\/sushi2k\/Documents\/mastg-apps\/MASTestApp-iOS-MASWE-0076\/MASTestApp.xcodeproj\/project.xcworkspace\/xcshareddata\/swiftpm\/Package.resolved","index": 0 }},"logicalLocations": [{"fullyQualifiedName": "pkg:swift\/swift-nio@2.33.0"}]}]}]}]}